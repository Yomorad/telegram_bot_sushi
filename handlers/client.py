from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import dp, bot
from keyboards import client_kb
from database import sqlrequests
from aiogram.utils.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton,LabeledPrice, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from config import Config
import datetime, random, pytz

from middlewares import rate_limit

class FSMclient(StatesGroup):
    name_c = State()
    number_c = State()
    adress_c = State()
    adress_c_1 = State()
    commentary_c = State()
    tools_c = State()
    time_order_c = State()

@rate_limit(limit=5, key = '/start')
#@dp.message_handler(commands=['start'])
async def commands_start(message: types.Message):
    try:
        mess = f'üòÉ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –Ω–∞–º!' \
               f'\n –í–∞—Å –∂–¥–µ—Ç:' \
               f'\n üëç - –Ω–∞–∏–≤–∫—É—Å–Ω–µ–π—à–∏–µ —Å—É—à–∏ –∏ —Ä–æ–ª–ª—ã' \
               f'\n üëç - –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞' \
               f'\n üëç - –ø—Ä–∏–≤–µ—Ç–ª–∏–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ!' \
               f'\n üëá –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω—é!'
        await sqlrequests.sql_start2(message)
        await message.bot.send_message(message.from_user.id, mess, reply_markup=client_kb.kb_client)
    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É \nhttps://t.me/Sushi_for_everybody_bot')
        await message.bot.send_message(message.from_user.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!' , reply_markup=client_kb.kb_client)

@rate_limit(limit=5, key = 'üë®‚Äçüç≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏')
#@dp.message_handler(text='üë®‚Äçüç≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏')
async def commands_location(message: types.Message):
    await sqlrequests.sql_read_restaurant(message)

'''*****************************************–õ–æ–≥–∏–∫–∞ –º–µ–Ω—é*************************************************'''
cb = CallbackData('btn', 'type', 'product_id', 'category_id')

# –≤—ã–≤–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
async def gen_products(data, user_id):
    keyboard = InlineKeyboardMarkup()
    for i in data:
        count = await sqlrequests.get_count_in_cart(user_id, i[1])
        count = 0 if not count else sum(j[0] for j in count)
        keyboard.add(InlineKeyboardButton(text=f'{i[3]}: {i[5]}p - {count}—à—Ç', callback_data=f'btn:plus:{i[1]}:{i[6]}'))
        keyboard.add(InlineKeyboardButton(text='üîΩ –£–±–∞–≤–∏—Ç—å' , callback_data=f'btn:minus:{i[1]}:{i[6]}'),
                     InlineKeyboardButton(text='üîº –î–æ–±–∞–≤–∏—Ç—å', callback_data=f'btn:plus:{i[1]}:{i[6]}'),
                     InlineKeyboardButton(text='‚ùå –û—á–∏—Å—Ç–∏—Ç—å', callback_data=f'btn:del:{i[1]}:{i[6]}'))
    return keyboard

@rate_limit(limit=5, key = 'üç∞ –ú–µ–Ω—é')
#@dp.message_handler(text='üç∞ –ú–µ–Ω—é')
async def commands_products(message: types.Message):
    for ret in await sqlrequests.sql_read_restaurant_for_availability():
        prov_availability = f'{ret[6]}'
        mess_availability = f'{ret [7]}'
    if str(prov_availability) == '1':
        data = await sqlrequests.get_categories()
        keyboard = InlineKeyboardMarkup()
        for i in data:
            keyboard.add(InlineKeyboardButton(text=f'{i[0]}', callback_data=f'btn:category:-:{i[1]}'))
        await message.answer('–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω—é', reply_markup=keyboard)
    else:
        await message.answer(mess_availability)

@dp.callback_query_handler(cb.filter(type='category'))
async def goods(callback_query: types.CallbackQuery, callback_data: dict):
    data = await sqlrequests.get_products(callback_data.get('category_id'))
    for ret in data:
        count = await sqlrequests.get_count_in_cart(callback_query.message.chat.id, ret[1])
        count = 0 if not count else sum(j[0] for j in count)
        k1 = InlineKeyboardButton(text=f'{ret[3]}: {ret[5]}p - {count}—à—Ç', callback_data=f'btn:plus:{ret[1]}:{ret[6]}')
        k2 = InlineKeyboardButton(text='üîΩ –£–±–∞–≤–∏—Ç—å' , callback_data=f'btn:minus:{ret[1]}:{ret[6]}')
        k3 = InlineKeyboardButton(text='üîº –î–æ–±–∞–≤–∏—Ç—å', callback_data=f'btn:plus:{ret[1]}:{ret[6]}')
        k4 = InlineKeyboardButton(text='‚ùå –û—á–∏—Å—Ç–∏—Ç—å', callback_data=f'btn:del:{ret[1]}:{ret[6]}')
        inkb_main = InlineKeyboardMarkup(resize_keyboard=True)
        inkb_main.add(k1).add(k2, k3, k4)
        await bot.send_photo(callback_query.message.chat.id, ret[2], f'{ret[3]}\n{ret[4]}',reply_markup=inkb_main)
    await bot.send_message(callback_query.message.chat.id, '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!', reply_markup=InlineKeyboardMarkup(resize_keyboard=True).add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'btn:back:-:-')))

@dp.callback_query_handler(cb.filter(type='back'))
async def back(callback_query: types.CallbackQuery):
    data = await sqlrequests.get_categories()
    keyboard = InlineKeyboardMarkup()
    for i in data:
        keyboard.add(InlineKeyboardButton(text=f'{i[0]}', callback_data=f'btn:category:-:{i[1]}'))
    await callback_query.message.edit_reply_markup(keyboard)

@dp.callback_query_handler(cb.filter(type='minus'))
async def minus(callback_query: types.CallbackQuery, callback_data: dict):
    product_id = callback_data.get('product_id')
    count_in_cart = await sqlrequests.get_count_in_cart(callback_query.message.chat.id, product_id)
    if not count_in_cart or count_in_cart[0][0] == 0:
        await callback_query.message.answer('–¢–æ–≤–∞—Ä –≤  –∫–æ—Ä–∑–∏–Ω–µ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç!')
        return 0
    elif count_in_cart[0][0] == 1:
        await sqlrequests.remove_one_item(product_id, callback_query.message.chat.id)
    else:
        await sqlrequests.change_count(count_in_cart[0][0] - 1, product_id, callback_query.message.chat.id)
    data = await sqlrequests.get_products_1(callback_data.get('category_id'), callback_data.get('product_id'))
    keyboard = await gen_products(data, callback_query.message.chat.id)
    await callback_query.message.edit_reply_markup(keyboard)

@dp.callback_query_handler(cb.filter(type='plus'))
async def plus(callback_query: types.CallbackQuery, callback_data: dict):
    product_id = callback_data.get('product_id')
    count_in_cart = await sqlrequests.get_count_in_cart(callback_query.message.chat.id, product_id)
    if not count_in_cart or count_in_cart[0][0] == 0:
        await sqlrequests.add_to_cart(callback_query.message.chat.id, product_id)
        await callback_query.message.answer('–î–æ–±–∞–≤–∏–ª!')
    else:
        await sqlrequests.change_count(count_in_cart[0][0] + 1, product_id, callback_query.message.chat.id)
    data = await sqlrequests.get_products_1(callback_data.get('category_id'), callback_data.get('product_id'))
    keyboard = await gen_products(data, callback_query.message.chat.id)
    await callback_query.message.edit_reply_markup(keyboard)

@dp.callback_query_handler(cb.filter(type='del'))
async def delete(callback_query: types.CallbackQuery, callback_data: dict):
    product_id = callback_data.get('product_id')
    count_in_cart = await sqlrequests.get_count_in_cart(callback_query.message.chat.id, product_id)
    if not count_in_cart:
        await callback_query.message.answer('–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!')
        return 0
    else:
        await sqlrequests.remove_one_item(product_id, callback_query.message.chat.id)
    data = await sqlrequests.get_products_1(callback_data.get('category_id'), callback_data.get('product_id'))
    keyboard = await gen_products(data, callback_query.message.chat.id)
    await callback_query.message.edit_reply_markup(keyboard)

@dp.callback_query_handler(lambda x: x.data and x.data.startswith('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É'))
@dp.message_handler(text='–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É')
async def empty_cart(message: types.Message):
    await sqlrequests.empty_cart(message.chat.id)
    await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')

@rate_limit(limit=5, key = '‚úÖ –ö–æ—Ä–∑–∏–Ω–∞')
#@dp.message_handler(text='‚úÖ –ö–æ—Ä–∑–∏–Ω–∞')
async def cart(message: types.Message):
    for ret in await sqlrequests.sql_read_restaurant_for_availability():
        prov_availability = f'{ret[6]}'
        mess_availability = f'{ret [7]}'
    if str(prov_availability) == '1':
        data = await sqlrequests.get_cart(message.chat.id)
        new_data = []
        a = []
        for i in range(len(data)):
            new_data.append(await sqlrequests.get_user_product(data[i][2]))
        new_data = [new_data[i][0] for i in range(len(new_data))]
        a = f'–ö–æ—Ä–∑–∏–Ω–∞:\n'
        s = 0
        for i in range(len(data)):
            a += f'\n{new_data[i][3]} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data[i][3]}\n–¶–µ–Ω–∞: {new_data[i][5]} x {data[i][3]} = {new_data[i][5]  * data[i][3]}\n'
            s += new_data[i][5]  * data[i][3]
        a += f'\n–ò—Ç–æ–≥–æ: {s} —Ä—É–±–ª–µ–π'
        data = await sqlrequests.get_myself(message.chat.id)
        for ret in data:
            a +=f'\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n–ò–º—è: {ret[2]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {ret[3]}\n–ê–¥—Ä–µ—Å: {ret[4]}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {ret[5]}'
        await bot.send_message(message.chat.id, a, reply_markup=client_kb.kb_client4)
    else:
        await message.answer(mess_availability)

'''****************************************–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω, –Ω–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞**************************************************'''
@rate_limit(limit=5, key = ('–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω', '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'))
@dp.message_handler(text = '–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω', state=None)
@dp.message_handler(text = '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', state=None)
async def order_start(message: types.Message):
    for ret in await sqlrequests.sql_read_restaurant_for_availability():
        prov_availability = f'{ret[6]}'
        mess_availability = f'{ret [7]}'
    if str(prov_availability) == '1':
        data = await sqlrequests.get_cart(message.chat.id)
        proverka = 0
        for heru in data:
            proverka += heru[2]
        if proverka == 0 or proverka == '' or proverka == 'None':
            await bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞!')
        else:
            await FSMclient.tools_c.set()
            await message.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω')
    else:
        await message.answer(mess_availability)

@dp.message_handler(state=FSMclient.tools_c)
async def order_start_tools(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['tools_c'] = message.text
    tools_c = message.text
    await sqlrequests.sql_add_tools_c(tools_c, message.chat.id)
    await state.finish()
    await message.reply('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
    await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞:', reply_markup=client_kb.kb_client_time_order)

'''****************************************–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞**************************************************'''

@rate_limit(limit=5, key = ('–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞', '–ö–æ –≤—Ä–µ–º–µ–Ω–∏'))
@dp.message_handler(text = '–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞', state=None)
@dp.message_handler(text = '–ö–æ –≤—Ä–µ–º–µ–Ω–∏', state=None)
async def order_start(message: types.Message):
    await FSMclient.time_order_c.set()
    await message.reply('–£–∫–∞–∂–∏—Ç–µ –∫ –∫–∞–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏')

@dp.message_handler(state=FSMclient.time_order_c)
async def order_start_tools(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['time_order_c'] = message.text
    time_order_c = message.text
    await sqlrequests.sql_add_time_order(time_order_c, message.chat.id)
    await state.finish()
    await message.reply('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è', reply_markup=client_kb.kb_client_obtaining)

@rate_limit(limit=5, key = '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ')
@dp.message_handler(text = '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ')
async def order_start(message: types.Message):
    time_order = '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ'
    await sqlrequests.sql_add_time_order(time_order, message.chat.id)
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è', reply_markup=client_kb.kb_client_obtaining)

'''****************************************–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è**************************************************'''

@rate_limit(limit=5, key = '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è')
@dp.message_handler(text = '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è')
async def order_start(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è', reply_markup=client_kb.kb_client_obtaining)

@rate_limit(limit=5, key = '–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º')
@dp.message_handler(text = '–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º', state=None)
async def order_obtaining_1(message: types.Message):
    await FSMclient.adress_c.set()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å')

@dp.message_handler(state=FSMclient.adress_c)
async def order_obtaining_1_2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['adress_c'] = message.text
    adress = message.text
    obtaining = '–ö—É—Ä—å–µ—Ä–æ–º'
    await sqlrequests.sql_add_adress_c2(adress, obtaining, message.chat.id)
    await state.finish()
    await message.reply('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
    data = await sqlrequests.get_cart(message.chat.id)
    new_data = []
    for i in range(len(data)):
        new_data.append(await sqlrequests.get_user_product(data[i][2]))
    new_data = [new_data[i][0] for i in range(len(new_data))]
    a = f'–ö–æ—Ä–∑–∏–Ω–∞:\n'
    s = 0
    for i in range(len(data)):
        a += f'\n{new_data[i][3]} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data[i][3]}\n–¶–µ–Ω–∞: {new_data[i][5]} x {data[i][3]} = {new_data[i][5] * data[i][3]}\n'
        s += new_data[i][5] * data[i][3]
    limit_price = None
    price_obtaining = None
    gain = '–ö—É—Ä—å–µ—Ä–æ–º'
    for sert in await sqlrequests.sql_get_obtaining(message.chat.id):
        obtaining = sert[7]
    for nerf in await sqlrequests.sql_get_pickup_obtaining():
        limit_price = nerf[5]
    for kart in await sqlrequests.sql_get_pickup_obtaining():
        price_obtaining = kart[4]
    if gain == obtaining:
        if s >= limit_price:
            s += 0
            n = 0
        else:
            s += int(price_obtaining)
            n = int(price_obtaining)
    else:
        s += 0
        n = 0
    a += f'\n\n–î–æ—Å—Ç–∞–≤–∫–∞: {n} —Ä—É–±–ª–µ–π'
    s += n
    a += f'\n\n–ò—Ç–æ–≥–æ: {s} —Ä—É–±–ª–µ–π'
    data = await sqlrequests.get_myself(message.chat.id)
    for ret in data:
        a += f'\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n–ò–º—è: {ret[2]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {ret[3]}\n–ê–¥—Ä–µ—Å: {ret[4]}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {ret[5]}\n–ü–æ–ª–æ–∂–∏—Ç—å –ø—Ä–∏–±–æ—Ä—ã –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω: {ret[6]}\n\n–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {ret[7]}\n\n–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {ret[8]}'
        if f'{ret[3]}' == 'None' or f'{ret[3]}' == '':
            a += f'\n\n–í–Ω–∏–º–∞–Ω–∏–µ! –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏'
    await bot.send_message(message.chat.id, a, reply_markup=client_kb.inkb_client2)
    await message.bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', reply_markup=client_kb.kb_client_pay)

@rate_limit(limit=5, key = '–°–∞–º–æ–≤—ã–≤–æ–∑')
@dp.message_handler(text = '–°–∞–º–æ–≤—ã–≤–æ–∑')
async def order_obtaining_2(message: types.Message):
    read = await sqlrequests.sql_get_pickup_obtaining()
    for ret in read:
        await bot.send_photo(message.from_user.id, ret[2], f'\n{ret[3]}')
    data = await sqlrequests.get_cart(message.chat.id)
    new_data = []
    for i in range(len(data)):
        new_data.append(await sqlrequests.get_user_product(data[i][2]))
    new_data = [new_data[i][0] for i in range(len(new_data))]
    a = f'–ö–æ—Ä–∑–∏–Ω–∞:\n'
    s = 0
    for i in range(len(data)):
        a += f'\n{new_data[i][3]} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data[i][3]}\n–¶–µ–Ω–∞: {new_data[i][5]} x {data[i][3]} = {new_data[i][5] * data[i][3]}\n'
        s += new_data[i][5] * data[i][3]
    limit_price = None
    price_obtaining = None
    obtaining = '–°–∞–º–æ–≤—ã–≤–æ–∑'
    await sqlrequests.sql_add_obtaining_c2(obtaining, message.chat.id)
    gain = '–ö—É—Ä—å–µ—Ä–æ–º'
    for sert in await sqlrequests.sql_get_obtaining(message.chat.id):
        obtaining = sert[7]
    for nerf in await sqlrequests.sql_get_pickup_obtaining():
        limit_price = nerf[5]
    for kart in await sqlrequests.sql_get_pickup_obtaining():
        price_obtaining = kart[4]
    if gain == obtaining:
        if s >= limit_price:
            s += 0
            n = 0
        else:
            s += int(price_obtaining)
            n = int(price_obtaining)
    else:
        s += 0
        n = 0
    a += f'\n\n–î–æ—Å—Ç–∞–≤–∫–∞: {n} —Ä—É–±–ª–µ–π'
    s += n
    a += f'\n\n–ò—Ç–æ–≥–æ: {s} —Ä—É–±–ª–µ–π\n'
    data = await sqlrequests.get_myself(message.chat.id)
    for ret in data:
        a += f'\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n–ò–º—è: {ret[2]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {ret[3]}\n–ê–¥—Ä–µ—Å: {ret[4]}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {ret[5]}\n–ü–æ–ª–æ–∂–∏—Ç—å –ø—Ä–∏–±–æ—Ä—ã –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω: {ret[6]}\n\n–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {ret[7]}\n\n–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {ret[8]}'
        if f'{ret[3]}' == 'None' or f'{ret[3]}' == '':
            a += f'\n\n–í–Ω–∏–º–∞–Ω–∏–µ! –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏'
    await bot.send_message(message.chat.id, a, reply_markup=client_kb.inkb_client2)
    await message.bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', reply_markup=client_kb.kb_client_pay)

'''****************************************–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã**************************************************'''

@rate_limit(limit=5, key = '–ù–∞–ª–∏—á–Ω—ã–º–∏')
@dp.message_handler(text = '–ù–∞–ª–∏—á–Ω—ã–º–∏')
async def pay_nal(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n'
                                                 '\n–í —Å–ª—É—á–∞–µ –Ω–∞–ª–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã, –∑–∞–∫–∞–∑ –Ω–∞—á–∏–Ω–∞—é—Ç –≥–æ—Ç–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å—Ç–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç',
                           reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text='–ò–∑–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' , callback_data=f'–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä'),
                     InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑')))

@dp.callback_query_handler(lambda x: x.data and x.data.startswith('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑'))
async def del_send_order(callback_query: types.CallbackQuery):
    data = await sqlrequests.get_cart(callback_query.message.chat.id)
    proverka = 0
    for heru in data:
        proverka += heru[2]
    if proverka == 0 or proverka == '' or proverka == 'None':
        await bot.send_message(callback_query.message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞!')
    else:
        data = await sqlrequests.get_cart(callback_query.message.chat.id)
        new_data = []
        for i in range(len(data)):
            new_data.append(await sqlrequests.get_user_product(data[i][2]))
        new_data = [new_data[i][0] for i in range(len(new_data))]
        a = f'–ö–æ—Ä–∑–∏–Ω–∞:\n'
        s = 0
        for i in range(len(data)):
            a += f'\n{new_data[i][3]} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data[i][3]}\n–¶–µ–Ω–∞: {new_data[i][5]} x {data[i][3]} = {new_data[i][5] * data[i][3]}\n'
            s += new_data[i][5] * data[i][3]
        obtaining = None
        limit_price = None
        price_obtaining = None
        gain = '–ö—É—Ä—å–µ—Ä–æ–º'
        for sert in await sqlrequests.sql_get_obtaining(callback_query.message.chat.id):
            obtaining = sert[7]
        for nerf in await sqlrequests.sql_get_pickup_obtaining():
            limit_price = nerf[5]
        for kart in await sqlrequests.sql_get_pickup_obtaining():
            price_obtaining = kart[4]
        if gain == obtaining:
            if s >= limit_price:
                s += 0
                n = 0
            else:
                s += int(price_obtaining)
                n = int(price_obtaining)
        else:
            s += 0
            n = 0
        a += f'\n–î–æ—Å—Ç–∞–≤–∫–∞: {n} —Ä—É–±–ª–µ–π'
        s += n
        a += f'\n\n–ò—Ç–æ–≥–æ: {s} —Ä—É–±–ª–µ–π'
        data = await sqlrequests.get_myself(callback_query.message.chat.id)
        for ret in data:
            a += f'\n\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n–ò–º—è: {ret[2]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {ret[3]}\n–ê–¥—Ä–µ—Å: {ret[4]}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {ret[5]}\n–ü–æ–ª–æ–∂–∏—Ç—å –ø—Ä–∏–±–æ—Ä—ã –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω: {ret[6]}\n\n–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {ret[7]}\n\n–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {ret[8]}'
        #  –ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è
        tz_russia_asha = pytz.timezone("Asia/Yekaterinburg")
        dt_russia_asha = str( datetime.datetime.now(tz_russia_asha))
        #  –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º id –∑–∞–∫–∞–∑–∞
        str1 = list('1234567890')
        data_orders_id = '–°–ø–∏—Å–æ–∫ id_order:\n\n'
        for ret in await sqlrequests.sql_read_id_orders_user():
            data_orders_id += f'{ret[1]}\n'
        random.shuffle(str1)
        order_id = ''.join([random.choice(str1) for x in range(7)])
        while order_id in data_orders_id:
            random.shuffle(str1)
            order_id = ''.join([random.choice(str1) for x in range(5)])
        #  –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ —á—Ç–æ –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞—Ç—å
        user_id = callback_query.message.chat.id
        id_order = order_id
        cart_order = a
        order_date = dt_russia_asha
        status = '–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
        payment = '–ù–∞–ª'
        await bot.send_message(callback_query.message.chat.id, a)
        #  –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–¥
        await sqlrequests.sql_add_order_client_nal(user_id, id_order, cart_order, order_date, status, payment)
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É: –∑–∞–∫–∞–∑, –µ–≥–æ –Ω–æ–º–µ—Ä, –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
        await bot.send_message(Config.admin_id, f'–ó–∞–∫–∞–∑ {id_order} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –∫–ª–∏–µ–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç –∑–≤–æ–Ω–∫–∞!\n\n{a}')
        # –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await sqlrequests.empty_cart(callback_query.message.chat.id)
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        await bot.send_message(callback_query.message.chat.id,
                               f'–ó–∞–∫–∞–∑ {id_order} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è!')

'''****************************************–û–ø–ª–∞—Ç–∞**************************************************'''

@rate_limit(limit=5, key = '–°–±–µ—Ä–±–∞–Ω–∫')
@dp.message_handler(text='–°–±–µ—Ä–±–∞–Ω–∫')
async def buy_process(message: types.Message):
    data = await sqlrequests.get_cart(message.chat.id)
    proverka = 0
    for heru in data:
        proverka += heru[2]
    if proverka == 0 or proverka == '' or proverka == 'None':
        await bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞!')
    else:
        new_data = []
        for i in range(len(data)):
            new_data.append(await sqlrequests.get_user_product(data[i][2]))
        new_data = [new_data[i][0] for i in range(len(new_data))]
        s = 0
        for i in range(len(data)):
            s += new_data[i][5] * data[i][3]
        obtaining = None
        limit_price = None
        price_obtaining = None
        gain = '–ö—É—Ä—å–µ—Ä–æ–º'
        for sert in await sqlrequests.sql_get_obtaining(message.chat.id):
            obtaining = sert[7]
        for nerf in await sqlrequests.sql_get_pickup_obtaining():
            limit_price = nerf[5]
        for kart in await sqlrequests.sql_get_pickup_obtaining():
            price_obtaining = kart[4]
        if gain == obtaining:
            if s >= limit_price:
                s += 0
                n = 0
            else:
                s += int(price_obtaining)
                n = int(price_obtaining)
        else:
            n = 0
            s += 0
        s += n
        data = await sqlrequests.get_cart(message.chat.id)
        new_data = []
        for i in range(len(data)):
            new_data.append(await sqlrequests.get_user_product(data[i][2]))
        new_data = [new_data[i][0] for i in range(len(new_data))]
        prices = [LabeledPrice(label=new_data[i][3]+f' x {data[i][3]}', amount= new_data[i][5] * 100 * data[i][3]) for i in range(len(new_data))]
        prices += [LabeledPrice(label=f'–î–æ—Å—Ç–∞–≤–∫–∞', amount= n * 100 )]
        await bot.send_invoice(message.chat.id,
                               title='–∫—É—Å–æ—á–µ–∫ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è',
                               description='–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –Ω–∞ —Å–≤—è–∑–∏',
                               provider_token=Config.pay_token,
                               currency='rub',
                               need_email=False,
                               prices=prices,
                               start_parameter='example',
                               payload='some_invoice')

@dp.pre_checkout_query_handler(lambda q: True)
async def checkout_process(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def s_pay(message: types.Message):
    data = await sqlrequests.get_cart(message.chat.id)
    new_data = []
    a = []
    for i in range(len(data)):
        new_data.append(await sqlrequests.get_user_product(data[i][2]))
    new_data = [new_data[i][0] for i in range(len(new_data))]
    a = f'–ö–æ—Ä–∑–∏–Ω–∞:\n'
    s = 0
    proverka = ''
    for i in range(len(data)):
        a += f'\n{new_data[i][3]} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data[i][3]}\n–¶–µ–Ω–∞: {new_data[i][5]} x {data[i][3]} = {new_data[i][5] * data[i][3]}\n'
        proverka += str({new_data[i][3]})
        s += new_data[i][5] * data[i][3]
    obtaining = None
    limit_price = None
    price_obtaining = None
    gain = '–ö—É—Ä—å–µ—Ä–æ–º'
    for sert in await sqlrequests.sql_get_obtaining(message.chat.id):
        obtaining = sert[7]
    for nerf in await sqlrequests.sql_get_pickup_obtaining():
        limit_price = nerf[5]
    for kart in await sqlrequests.sql_get_pickup_obtaining():
        price_obtaining = kart[4]
    if gain == obtaining:
        if s >= limit_price:
            s += 0
            n = 0
        else:
            s += int(price_obtaining)
            n = int(price_obtaining)
    else:
        n = 0
        s += 0
    a += f'\n–î–æ—Å—Ç–∞–≤–∫–∞: {n} —Ä—É–±–ª–µ–π'
    s += n
    a += f'\n\n–ò—Ç–æ–≥–æ: {s} —Ä—É–±–ª–µ–π'
    data = await sqlrequests.get_myself(message.chat.id)
    for ret in data:
        a += f'\n\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n–ò–º—è: {ret[2]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {ret[3]}\n–ê–¥—Ä–µ—Å: {ret[4]}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {ret[5]}\n–ü–æ–ª–æ–∂–∏—Ç—å –ø—Ä–∏–±–æ—Ä—ã –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω: {ret[6]}\n\n–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {ret[7]}\n\n–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {ret[8]}'

    #  –ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è
    tz_russia_asha = pytz.timezone("Asia/Yekaterinburg")
    dt_russia_asha = str(datetime.datetime.now(tz_russia_asha))
    # datetime_obj = datetime.strptime(dt_russia_asha, '%m/%d/%y %H:%M:%S')
    # date_obj = datetime.datetime.strptime(dt_russia_asha, '%m/%d/%y')
    #  –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º id –∑–∞–∫–∞–∑–∞
    str1 = list('1234567890')
    data_orders_id = '–°–ø–∏—Å–æ–∫ id_order:\n\n'
    for ret in await sqlrequests.sql_read_id_orders_user():
        data_orders_id += f'{ret[1]}\n'
    random.shuffle(str1)
    order_id = ''.join([random.choice(str1) for x in range(7)])
    while order_id in data_orders_id:
        random.shuffle(str1)
        order_id = ''.join([random.choice(str1) for x in range(5)])
    #  –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ —á—Ç–æ –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞—Ç—å
    user_id = message.chat.id
    id_order = order_id
    cart_order = a
    order_date = dt_russia_asha
    status = '–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
    payment = '–ë–µ–∑–Ω–∞–ª'

    if proverka == 0 or proverka == 'None':
        await bot.send_message(message.chat.id, f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞!')
    else:
        #  –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–¥
        await sqlrequests.sql_add_order_client_nal(user_id, id_order, cart_order, order_date, status, payment)
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É: –∑–∞–∫–∞–∑, –µ–≥–æ –Ω–æ–º–µ—Ä, –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
        await bot.send_message(Config.admin_id, f'–ó–∞–∫–∞–∑ {id_order} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –∫–ª–∏–µ–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç –∑–≤–æ–Ω–∫–∞!\n\n{a}')
        # –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await sqlrequests.empty_cart(message.chat.id)
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        await bot.send_message(message.chat.id, f'–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!\n\n–ó–∞–∫–∞–∑ {id_order} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è!')

'''****************************************–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é**************************************************'''
@rate_limit(limit=5, key = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@dp.message_handler(text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def commands_back(message: types.Message):
    await message.bot.send_message(message.from_user.id, '–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=client_kb.kb_client)

'''******************************************–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏***********************************************'''

@rate_limit(limit=5, key = 'üéÅ –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏')
#@dp.message_handler(text='üéÅ –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏')
async def commands_news(message: types.Message):
    await sqlrequests.sql_read_promotion(message)

'''***************** –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "–æ—Ç–º–µ–Ω–∞", –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ª—é–±–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ *************************'''

# –í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state='*', commands=['–æ—Ç–º–µ–Ω–∞'])
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–û–∫')

'''*********************************************** –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ *******************************************************'''
@rate_limit(limit=5, key = ('–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ', 'üíö –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ'))
@dp.message_handler(text = '–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ')
@dp.message_handler(text = 'üíö –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ')
async def commands_myself(message: types.Message):
    data = await sqlrequests.get_myself(message.chat.id)
    for ret in data:
        await bot.send_message(message.from_user.id, f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {ret[2]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {ret[3]}\n–ê–¥—Ä–µ—Å: {ret[4]}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {ret[5]}', reply_markup=client_kb.inkb_client2)

#–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –ò–∑–º–µ–Ω–∏—Ç—å_–∏–º—è
@dp.callback_query_handler(lambda x: x.data and x.data.startswith('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è'), state=None)
async def change_name_c(CallbackQuery: types.CallbackQuery):
    await FSMclient.name_c.set()
    await CallbackQuery.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ "–û—Ç–º–µ–Ω–∞"', show_alert = True)
    # await CallbackQuery.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ "–û—Ç–º–µ–Ω–∞" ')

# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ –ò–∑–º–µ–Ω–∏—Ç—å_–∏–º—è
@dp.message_handler(state=FSMclient.name_c)
async def change_name_c2 (message: types.Message, state: FSMContext):
    name_c = message.text
    await sqlrequests.sql_add_name_c(name_c, message.chat.id)
    await state.finish()
    await message.reply('–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ!')

#–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –ò–∑–º–µ–Ω–∏—Ç—å_–Ω–æ–º–µ—Ä
@dp.callback_query_handler(lambda x: x.data and x.data.startswith('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä'), state=None)
async def change_number_c(CallbackQuery: types.CallbackQuery):
    await FSMclient.number_c.set()
    await CallbackQuery.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ "–û—Ç–º–µ–Ω–∞"', show_alert=True)
    # await CallbackQuery.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ "–û—Ç–º–µ–Ω–∞" ')

# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ –ò–∑–º–µ–Ω–∏—Ç—å_–Ω–æ–º–µ—Ä
@dp.message_handler(state=FSMclient.number_c)
async def change_number_c2 (message: types.Message, state: FSMContext):
    number_c = message.text
    await sqlrequests.sql_add_number_c(number_c, message.chat.id)
    await state.finish()
    await message.reply('–ù–æ–º–µ—Ä –∏–∑–º–µ–Ω—ë–Ω!')

#–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –ò–∑–º–µ–Ω–∏—Ç—å_–∞–¥—Ä–µ—Å
@dp.callback_query_handler(lambda x: x.data and x.data.startswith('–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å'), state=None)
async def change_adress_c(CallbackQuery: types.CallbackQuery):
    await FSMclient.adress_c_1.set()
    await CallbackQuery.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ "–û—Ç–º–µ–Ω–∞"', show_alert=True)
    # await CallbackQuery.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ "–û—Ç–º–µ–Ω–∞" ')

# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ –ò–∑–º–µ–Ω–∏—Ç—å_–∞–¥—Ä–µ—Å
@dp.message_handler(state=FSMclient.adress_c_1)
async def change_adress_c2 (message: types.Message, state: FSMContext):
    adress_c_1 = message.text
    await sqlrequests.sql_add_adress_c(adress_c_1, message.chat.id)
    await state.finish()
    await message.reply('–ê–¥—Ä–µ—Å –∏–∑–º–µ–Ω—ë–Ω!')

#–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –ò–∑–º–µ–Ω–∏—Ç—å_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
@dp.callback_query_handler(lambda x: x.data and x.data.startswith('–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É'), state=None)
async def change_commentary_c(CallbackQuery: types.CallbackQuery):
    await FSMclient.commentary_c.set()
    await CallbackQuery.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ "–û—Ç–º–µ–Ω–∞"', show_alert=True)
    # await CallbackQuery.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ "–û—Ç–º–µ–Ω–∞" ')

# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ –ò–∑–º–µ–Ω–∏—Ç—å_–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
@dp.message_handler(state=FSMclient.commentary_c)
async def change_commentary_c2 (message: types.Message, state: FSMContext):
    commentary_c = message.text
    await sqlrequests.sql_add_commentary_c(commentary_c, message.chat.id)
    await state.finish()
    await message.reply('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏–∑–º–µ–Ω—ë–Ω!')

'''*********************************************** –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ *******************************************************'''

def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(commands_start, commands=['start'])
    dp.register_message_handler(commands_location, text='üë®‚Äçüç≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏')
    dp.register_message_handler(commands_products, text='üç∞ –ú–µ–Ω—é')
    dp.register_message_handler(commands_news, text='üéÅ –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏')
    dp.register_message_handler(commands_myself, text='üíö –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ')
    dp.register_message_handler(cart, text='‚úÖ –ö–æ—Ä–∑–∏–Ω–∞')
